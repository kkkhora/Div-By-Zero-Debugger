Pointer Analysis Results:
  %2      : { @(%a = alloca i32, align 4); @(%b = alloca i32, align 4); }
  %3      : { @(%a = alloca i32, align 4); @(%b = alloca i32, align 4); }
  %4      : { @(%a = alloca i32, align 4); @(%b = alloca i32, align 4); }
  %a      : { @(%a = alloca i32, align 4); }
  %arg.addr: { @(%arg.addr = alloca i32, align 4); }
  %b      : { @(%b = alloca i32, align 4); }
  %x      : { @(%x = alloca i32*, align 8); }
  %y      : { @(%y = alloca i32*, align 8); }
  %z      : { @(%z = alloca i32*, align 8); }
  %z2     : { @(%z2 = alloca i32, align 4); }
  @(%x = alloca i32*, align 8): { @(%a = alloca i32, align 4); @(%b = alloca i32, align 4); }
  @(%y = alloca i32*, align 8): { @(%a = alloca i32, align 4); @(%b = alloca i32, align 4); }
  @(%z = alloca i32*, align 8): { @(%a = alloca i32, align 4); @(%b = alloca i32, align 4); }

get store value operand: i32 %arg
get store value operand: i32 1
ptr1: %a      
ptr2: %2      
Store get Value Operand domain: 
NonZero  
Store get p Value Operand domain: 
Uninit   
Store get joined domain: 
NonZero  
ptr1: %a      
ptr2: %3      
Store get Value Operand domain: 
NonZero  
Store get p Value Operand domain: 
Uninit   
Store get joined domain: 
NonZero  
ptr1: %a      
ptr2: %4      
Store get Value Operand domain: 
NonZero  
Store get p Value Operand domain: 
Uninit   
Store get joined domain: 
NonZero  
get store value operand: i32 1
ptr1: %b      
ptr2: %2      
Store get Value Operand domain: 
NonZero  
Store get p Value Operand domain: 
NonZero  
Store get joined domain: 
NonZero  
ptr1: %b      
ptr2: %3      
Store get Value Operand domain: 
NonZero  
Store get p Value Operand domain: 
NonZero  
Store get joined domain: 
NonZero  
ptr1: %b      
ptr2: %4      
Store get Value Operand domain: 
NonZero  
Store get p Value Operand domain: 
NonZero  
Store get joined domain: 
NonZero  
Load type is integer
  %arg.addr = alloca i32, align 4
Load in InMem
Load Domain: MaybeZero
Load type is integer
  %arg.addr = alloca i32, align 4
Load in InMem
Load Domain: MaybeZero
Load type is integer
  %4 = load i32*, i32** %z, align 8
Load in InMem
Load Domain: NonZero  
get store value operand:   %div = sdiv i32 1, %5
get store value operand: i32 %arg
get store value operand: i32 1
ptr1: %a      
ptr2: %2      
Store get Value Operand domain: 
NonZero  
Store get p Value Operand domain: 
Uninit   
Store get joined domain: 
NonZero  
ptr1: %a      
ptr2: %3      
Store get Value Operand domain: 
NonZero  
Store get p Value Operand domain: 
Uninit   
Store get joined domain: 
NonZero  
ptr1: %a      
ptr2: %4      
Store get Value Operand domain: 
NonZero  
Store get p Value Operand domain: 
Uninit   
Store get joined domain: 
NonZero  
get store value operand: i32 1
ptr1: %b      
ptr2: %2      
Store get Value Operand domain: 
NonZero  
Store get p Value Operand domain: 
NonZero  
Store get joined domain: 
NonZero  
ptr1: %b      
ptr2: %3      
Store get Value Operand domain: 
NonZero  
Store get p Value Operand domain: 
NonZero  
Store get joined domain: 
NonZero  
ptr1: %b      
ptr2: %4      
Store get Value Operand domain: 
NonZero  
Store get p Value Operand domain: 
NonZero  
Store get joined domain: 
NonZero  
Load type is integer
  %arg.addr = alloca i32, align 4
Load in InMem
Load Domain: MaybeZero
Load type is integer
  %arg.addr = alloca i32, align 4
Load in InMem
Load Domain: MaybeZero
Load type is integer
  %4 = load i32*, i32** %z, align 8
Load in InMem
Load Domain: NonZero  
get store value operand:   %div = sdiv i32 1, %5
Dataflow Analysis Results:
Instruction:   %arg.addr = alloca i32, align 4
In set: 
    [ i32 %arg |-> MaybeZero ]
Out set: 
    [ i32 %arg |-> MaybeZero ]

Instruction:   %a = alloca i32, align 4
In set: 
    [ i32 %arg |-> MaybeZero ]
Out set: 
    [ i32 %arg |-> MaybeZero ]

Instruction:   %b = alloca i32, align 4
In set: 
    [ i32 %arg |-> MaybeZero ]
Out set: 
    [ i32 %arg |-> MaybeZero ]

Instruction:   %x = alloca i32*, align 8
In set: 
    [ i32 %arg |-> MaybeZero ]
Out set: 
    [ i32 %arg |-> MaybeZero ]

Instruction:   %y = alloca i32*, align 8
In set: 
    [ i32 %arg |-> MaybeZero ]
Out set: 
    [ i32 %arg |-> MaybeZero ]

Instruction:   %z = alloca i32*, align 8
In set: 
    [ i32 %arg |-> MaybeZero ]
Out set: 
    [ i32 %arg |-> MaybeZero ]

Instruction:   %z2 = alloca i32, align 4
In set: 
    [ i32 %arg |-> MaybeZero ]
Out set: 
    [ i32 %arg |-> MaybeZero ]

Instruction:   store i32 %arg, i32* %arg.addr, align 4
In set: 
    [ i32 %arg |-> MaybeZero ]
Out set: 
    [ %arg.addr |-> MaybeZero ]
    [ i32 %arg |-> MaybeZero ]

Instruction:   store i32 1, i32* %a, align 4
In set: 
    [ %arg.addr |-> MaybeZero ]
    [ i32 %arg |-> MaybeZero ]
Out set: 
    [ %2       |-> NonZero   ]
    [ %3       |-> NonZero   ]
    [ %4       |-> NonZero   ]
    [ %a       |-> NonZero   ]
    [ %arg.addr |-> MaybeZero ]
    [ i32 %arg |-> MaybeZero ]

Instruction:   store i32 1, i32* %b, align 4
In set: 
    [ %2       |-> NonZero   ]
    [ %3       |-> NonZero   ]
    [ %4       |-> NonZero   ]
    [ %a       |-> NonZero   ]
    [ %arg.addr |-> MaybeZero ]
    [ i32 %arg |-> MaybeZero ]
Out set: 
    [ %2       |-> NonZero   ]
    [ %3       |-> NonZero   ]
    [ %4       |-> NonZero   ]
    [ %a       |-> NonZero   ]
    [ %arg.addr |-> MaybeZero ]
    [ %b       |-> NonZero   ]
    [ i32 %arg |-> MaybeZero ]

Instruction:   %0 = load i32, i32* %arg.addr, align 4
In set: 
    [ %2       |-> NonZero   ]
    [ %3       |-> NonZero   ]
    [ %4       |-> NonZero   ]
    [ %a       |-> NonZero   ]
    [ %arg.addr |-> MaybeZero ]
    [ %b       |-> NonZero   ]
    [ i32 %arg |-> MaybeZero ]
Out set: 
    [ %0       |-> MaybeZero ]
    [ %2       |-> NonZero   ]
    [ %3       |-> NonZero   ]
    [ %4       |-> NonZero   ]
    [ %a       |-> NonZero   ]
    [ %arg.addr |-> MaybeZero ]
    [ %b       |-> NonZero   ]
    [ i32 %arg |-> MaybeZero ]

Instruction:   %tobool = icmp ne i32 %0, 0
In set: 
    [ %0       |-> MaybeZero ]
    [ %2       |-> NonZero   ]
    [ %3       |-> NonZero   ]
    [ %4       |-> NonZero   ]
    [ %a       |-> NonZero   ]
    [ %arg.addr |-> MaybeZero ]
    [ %b       |-> NonZero   ]
    [ i32 %arg |-> MaybeZero ]
Out set: 
    [ %0       |-> MaybeZero ]
    [ %2       |-> NonZero   ]
    [ %3       |-> NonZero   ]
    [ %4       |-> NonZero   ]
    [ %a       |-> NonZero   ]
    [ %arg.addr |-> MaybeZero ]
    [ %b       |-> NonZero   ]
    [ %tobool  |-> MaybeZero ]
    [ i32 %arg |-> MaybeZero ]

Instruction:   br i1 %tobool, label %if.then, label %if.else
In set: 
    [ %0       |-> MaybeZero ]
    [ %2       |-> NonZero   ]
    [ %3       |-> NonZero   ]
    [ %4       |-> NonZero   ]
    [ %a       |-> NonZero   ]
    [ %arg.addr |-> MaybeZero ]
    [ %b       |-> NonZero   ]
    [ %tobool  |-> MaybeZero ]
    [ i32 %arg |-> MaybeZero ]
Out set: 
    [ %0       |-> MaybeZero ]
    [ %2       |-> NonZero   ]
    [ %3       |-> NonZero   ]
    [ %4       |-> NonZero   ]
    [ %a       |-> NonZero   ]
    [ %arg.addr |-> MaybeZero ]
    [ %b       |-> NonZero   ]
    [ %tobool  |-> MaybeZero ]
    [ i32 %arg |-> MaybeZero ]

Instruction:   store i32* %a, i32** %x, align 8
In set: 
    [ %0       |-> MaybeZero ]
    [ %2       |-> NonZero   ]
    [ %3       |-> NonZero   ]
    [ %4       |-> NonZero   ]
    [ %a       |-> NonZero   ]
    [ %arg.addr |-> MaybeZero ]
    [ %b       |-> NonZero   ]
    [ %tobool  |-> MaybeZero ]
    [ i32 %arg |-> MaybeZero ]
Out set: 
    [ %0       |-> MaybeZero ]
    [ %2       |-> NonZero   ]
    [ %3       |-> NonZero   ]
    [ %4       |-> NonZero   ]
    [ %a       |-> NonZero   ]
    [ %arg.addr |-> MaybeZero ]
    [ %b       |-> NonZero   ]
    [ %tobool  |-> MaybeZero ]
    [ i32 %arg |-> MaybeZero ]

Instruction:   store i32* %b, i32** %y, align 8
In set: 
    [ %0       |-> MaybeZero ]
    [ %2       |-> NonZero   ]
    [ %3       |-> NonZero   ]
    [ %4       |-> NonZero   ]
    [ %a       |-> NonZero   ]
    [ %arg.addr |-> MaybeZero ]
    [ %b       |-> NonZero   ]
    [ %tobool  |-> MaybeZero ]
    [ i32 %arg |-> MaybeZero ]
Out set: 
    [ %0       |-> MaybeZero ]
    [ %2       |-> NonZero   ]
    [ %3       |-> NonZero   ]
    [ %4       |-> NonZero   ]
    [ %a       |-> NonZero   ]
    [ %arg.addr |-> MaybeZero ]
    [ %b       |-> NonZero   ]
    [ %tobool  |-> MaybeZero ]
    [ i32 %arg |-> MaybeZero ]

Instruction:   br label %if.end
In set: 
    [ %0       |-> MaybeZero ]
    [ %2       |-> NonZero   ]
    [ %3       |-> NonZero   ]
    [ %4       |-> NonZero   ]
    [ %a       |-> NonZero   ]
    [ %arg.addr |-> MaybeZero ]
    [ %b       |-> NonZero   ]
    [ %tobool  |-> MaybeZero ]
    [ i32 %arg |-> MaybeZero ]
Out set: 
    [ %0       |-> MaybeZero ]
    [ %2       |-> NonZero   ]
    [ %3       |-> NonZero   ]
    [ %4       |-> NonZero   ]
    [ %a       |-> NonZero   ]
    [ %arg.addr |-> MaybeZero ]
    [ %b       |-> NonZero   ]
    [ %tobool  |-> MaybeZero ]
    [ i32 %arg |-> MaybeZero ]

Instruction:   store i32* %b, i32** %x, align 8
In set: 
    [ %0       |-> MaybeZero ]
    [ %2       |-> NonZero   ]
    [ %3       |-> NonZero   ]
    [ %4       |-> NonZero   ]
    [ %a       |-> NonZero   ]
    [ %arg.addr |-> MaybeZero ]
    [ %b       |-> NonZero   ]
    [ %tobool  |-> MaybeZero ]
    [ i32 %arg |-> MaybeZero ]
Out set: 
    [ %0       |-> MaybeZero ]
    [ %2       |-> NonZero   ]
    [ %3       |-> NonZero   ]
    [ %4       |-> NonZero   ]
    [ %a       |-> NonZero   ]
    [ %arg.addr |-> MaybeZero ]
    [ %b       |-> NonZero   ]
    [ %tobool  |-> MaybeZero ]
    [ i32 %arg |-> MaybeZero ]

Instruction:   store i32* %a, i32** %y, align 8
In set: 
    [ %0       |-> MaybeZero ]
    [ %2       |-> NonZero   ]
    [ %3       |-> NonZero   ]
    [ %4       |-> NonZero   ]
    [ %a       |-> NonZero   ]
    [ %arg.addr |-> MaybeZero ]
    [ %b       |-> NonZero   ]
    [ %tobool  |-> MaybeZero ]
    [ i32 %arg |-> MaybeZero ]
Out set: 
    [ %0       |-> MaybeZero ]
    [ %2       |-> NonZero   ]
    [ %3       |-> NonZero   ]
    [ %4       |-> NonZero   ]
    [ %a       |-> NonZero   ]
    [ %arg.addr |-> MaybeZero ]
    [ %b       |-> NonZero   ]
    [ %tobool  |-> MaybeZero ]
    [ i32 %arg |-> MaybeZero ]

Instruction:   br label %if.end
In set: 
    [ %0       |-> MaybeZero ]
    [ %2       |-> NonZero   ]
    [ %3       |-> NonZero   ]
    [ %4       |-> NonZero   ]
    [ %a       |-> NonZero   ]
    [ %arg.addr |-> MaybeZero ]
    [ %b       |-> NonZero   ]
    [ %tobool  |-> MaybeZero ]
    [ i32 %arg |-> MaybeZero ]
Out set: 
    [ %0       |-> MaybeZero ]
    [ %2       |-> NonZero   ]
    [ %3       |-> NonZero   ]
    [ %4       |-> NonZero   ]
    [ %a       |-> NonZero   ]
    [ %arg.addr |-> MaybeZero ]
    [ %b       |-> NonZero   ]
    [ %tobool  |-> MaybeZero ]
    [ i32 %arg |-> MaybeZero ]

Instruction:   %1 = load i32, i32* %arg.addr, align 4
In set: 
    [ %0       |-> MaybeZero ]
    [ %2       |-> NonZero   ]
    [ %3       |-> NonZero   ]
    [ %4       |-> NonZero   ]
    [ %a       |-> NonZero   ]
    [ %arg.addr |-> MaybeZero ]
    [ %b       |-> NonZero   ]
    [ %tobool  |-> MaybeZero ]
    [ i32 %arg |-> MaybeZero ]
Out set: 
    [ %0       |-> MaybeZero ]
    [ %1       |-> MaybeZero ]
    [ %2       |-> NonZero   ]
    [ %3       |-> NonZero   ]
    [ %4       |-> NonZero   ]
    [ %a       |-> NonZero   ]
    [ %arg.addr |-> MaybeZero ]
    [ %b       |-> NonZero   ]
    [ %tobool  |-> MaybeZero ]
    [ i32 %arg |-> MaybeZero ]

Instruction:   %tobool1 = icmp ne i32 %1, 0
In set: 
    [ %0       |-> MaybeZero ]
    [ %1       |-> MaybeZero ]
    [ %2       |-> NonZero   ]
    [ %3       |-> NonZero   ]
    [ %4       |-> NonZero   ]
    [ %a       |-> NonZero   ]
    [ %arg.addr |-> MaybeZero ]
    [ %b       |-> NonZero   ]
    [ %tobool  |-> MaybeZero ]
    [ i32 %arg |-> MaybeZero ]
Out set: 
    [ %0       |-> MaybeZero ]
    [ %1       |-> MaybeZero ]
    [ %2       |-> NonZero   ]
    [ %3       |-> NonZero   ]
    [ %4       |-> NonZero   ]
    [ %a       |-> NonZero   ]
    [ %arg.addr |-> MaybeZero ]
    [ %b       |-> NonZero   ]
    [ %tobool  |-> MaybeZero ]
    [ %tobool1 |-> MaybeZero ]
    [ i32 %arg |-> MaybeZero ]

Instruction:   br i1 %tobool1, label %if.then2, label %if.else3
In set: 
    [ %0       |-> MaybeZero ]
    [ %1       |-> MaybeZero ]
    [ %2       |-> NonZero   ]
    [ %3       |-> NonZero   ]
    [ %4       |-> NonZero   ]
    [ %a       |-> NonZero   ]
    [ %arg.addr |-> MaybeZero ]
    [ %b       |-> NonZero   ]
    [ %tobool  |-> MaybeZero ]
    [ %tobool1 |-> MaybeZero ]
    [ i32 %arg |-> MaybeZero ]
Out set: 
    [ %0       |-> MaybeZero ]
    [ %1       |-> MaybeZero ]
    [ %2       |-> NonZero   ]
    [ %3       |-> NonZero   ]
    [ %4       |-> NonZero   ]
    [ %a       |-> NonZero   ]
    [ %arg.addr |-> MaybeZero ]
    [ %b       |-> NonZero   ]
    [ %tobool  |-> MaybeZero ]
    [ %tobool1 |-> MaybeZero ]
    [ i32 %arg |-> MaybeZero ]

Instruction:   %2 = load i32*, i32** %x, align 8
In set: 
    [ %0       |-> MaybeZero ]
    [ %1       |-> MaybeZero ]
    [ %2       |-> NonZero   ]
    [ %3       |-> NonZero   ]
    [ %4       |-> NonZero   ]
    [ %a       |-> NonZero   ]
    [ %arg.addr |-> MaybeZero ]
    [ %b       |-> NonZero   ]
    [ %tobool  |-> MaybeZero ]
    [ %tobool1 |-> MaybeZero ]
    [ i32 %arg |-> MaybeZero ]
Out set: 
    [ %0       |-> MaybeZero ]
    [ %1       |-> MaybeZero ]
    [ %2       |-> NonZero   ]
    [ %3       |-> NonZero   ]
    [ %4       |-> NonZero   ]
    [ %a       |-> NonZero   ]
    [ %arg.addr |-> MaybeZero ]
    [ %b       |-> NonZero   ]
    [ %tobool  |-> MaybeZero ]
    [ %tobool1 |-> MaybeZero ]
    [ i32 %arg |-> MaybeZero ]

Instruction:   store i32* %2, i32** %z, align 8
In set: 
    [ %0       |-> MaybeZero ]
    [ %1       |-> MaybeZero ]
    [ %2       |-> NonZero   ]
    [ %3       |-> NonZero   ]
    [ %4       |-> NonZero   ]
    [ %a       |-> NonZero   ]
    [ %arg.addr |-> MaybeZero ]
    [ %b       |-> NonZero   ]
    [ %tobool  |-> MaybeZero ]
    [ %tobool1 |-> MaybeZero ]
    [ i32 %arg |-> MaybeZero ]
Out set: 
    [ %0       |-> MaybeZero ]
    [ %1       |-> MaybeZero ]
    [ %2       |-> NonZero   ]
    [ %3       |-> NonZero   ]
    [ %4       |-> NonZero   ]
    [ %a       |-> NonZero   ]
    [ %arg.addr |-> MaybeZero ]
    [ %b       |-> NonZero   ]
    [ %tobool  |-> MaybeZero ]
    [ %tobool1 |-> MaybeZero ]
    [ i32 %arg |-> MaybeZero ]

Instruction:   br label %if.end4
In set: 
    [ %0       |-> MaybeZero ]
    [ %1       |-> MaybeZero ]
    [ %2       |-> NonZero   ]
    [ %3       |-> NonZero   ]
    [ %4       |-> NonZero   ]
    [ %a       |-> NonZero   ]
    [ %arg.addr |-> MaybeZero ]
    [ %b       |-> NonZero   ]
    [ %tobool  |-> MaybeZero ]
    [ %tobool1 |-> MaybeZero ]
    [ i32 %arg |-> MaybeZero ]
Out set: 
    [ %0       |-> MaybeZero ]
    [ %1       |-> MaybeZero ]
    [ %2       |-> NonZero   ]
    [ %3       |-> NonZero   ]
    [ %4       |-> NonZero   ]
    [ %a       |-> NonZero   ]
    [ %arg.addr |-> MaybeZero ]
    [ %b       |-> NonZero   ]
    [ %tobool  |-> MaybeZero ]
    [ %tobool1 |-> MaybeZero ]
    [ i32 %arg |-> MaybeZero ]

Instruction:   %3 = load i32*, i32** %y, align 8
In set: 
    [ %0       |-> MaybeZero ]
    [ %1       |-> MaybeZero ]
    [ %2       |-> NonZero   ]
    [ %3       |-> NonZero   ]
    [ %4       |-> NonZero   ]
    [ %a       |-> NonZero   ]
    [ %arg.addr |-> MaybeZero ]
    [ %b       |-> NonZero   ]
    [ %tobool  |-> MaybeZero ]
    [ %tobool1 |-> MaybeZero ]
    [ i32 %arg |-> MaybeZero ]
Out set: 
    [ %0       |-> MaybeZero ]
    [ %1       |-> MaybeZero ]
    [ %2       |-> NonZero   ]
    [ %3       |-> NonZero   ]
    [ %4       |-> NonZero   ]
    [ %a       |-> NonZero   ]
    [ %arg.addr |-> MaybeZero ]
    [ %b       |-> NonZero   ]
    [ %tobool  |-> MaybeZero ]
    [ %tobool1 |-> MaybeZero ]
    [ i32 %arg |-> MaybeZero ]

Instruction:   store i32* %3, i32** %z, align 8
In set: 
    [ %0       |-> MaybeZero ]
    [ %1       |-> MaybeZero ]
    [ %2       |-> NonZero   ]
    [ %3       |-> NonZero   ]
    [ %4       |-> NonZero   ]
    [ %a       |-> NonZero   ]
    [ %arg.addr |-> MaybeZero ]
    [ %b       |-> NonZero   ]
    [ %tobool  |-> MaybeZero ]
    [ %tobool1 |-> MaybeZero ]
    [ i32 %arg |-> MaybeZero ]
Out set: 
    [ %0       |-> MaybeZero ]
    [ %1       |-> MaybeZero ]
    [ %2       |-> NonZero   ]
    [ %3       |-> NonZero   ]
    [ %4       |-> NonZero   ]
    [ %a       |-> NonZero   ]
    [ %arg.addr |-> MaybeZero ]
    [ %b       |-> NonZero   ]
    [ %tobool  |-> MaybeZero ]
    [ %tobool1 |-> MaybeZero ]
    [ i32 %arg |-> MaybeZero ]

Instruction:   br label %if.end4
In set: 
    [ %0       |-> MaybeZero ]
    [ %1       |-> MaybeZero ]
    [ %2       |-> NonZero   ]
    [ %3       |-> NonZero   ]
    [ %4       |-> NonZero   ]
    [ %a       |-> NonZero   ]
    [ %arg.addr |-> MaybeZero ]
    [ %b       |-> NonZero   ]
    [ %tobool  |-> MaybeZero ]
    [ %tobool1 |-> MaybeZero ]
    [ i32 %arg |-> MaybeZero ]
Out set: 
    [ %0       |-> MaybeZero ]
    [ %1       |-> MaybeZero ]
    [ %2       |-> NonZero   ]
    [ %3       |-> NonZero   ]
    [ %4       |-> NonZero   ]
    [ %a       |-> NonZero   ]
    [ %arg.addr |-> MaybeZero ]
    [ %b       |-> NonZero   ]
    [ %tobool  |-> MaybeZero ]
    [ %tobool1 |-> MaybeZero ]
    [ i32 %arg |-> MaybeZero ]

Instruction:   %4 = load i32*, i32** %z, align 8
In set: 
    [ %0       |-> MaybeZero ]
    [ %1       |-> MaybeZero ]
    [ %2       |-> NonZero   ]
    [ %3       |-> NonZero   ]
    [ %4       |-> NonZero   ]
    [ %a       |-> NonZero   ]
    [ %arg.addr |-> MaybeZero ]
    [ %b       |-> NonZero   ]
    [ %tobool  |-> MaybeZero ]
    [ %tobool1 |-> MaybeZero ]
    [ i32 %arg |-> MaybeZero ]
Out set: 
    [ %0       |-> MaybeZero ]
    [ %1       |-> MaybeZero ]
    [ %2       |-> NonZero   ]
    [ %3       |-> NonZero   ]
    [ %4       |-> NonZero   ]
    [ %a       |-> NonZero   ]
    [ %arg.addr |-> MaybeZero ]
    [ %b       |-> NonZero   ]
    [ %tobool  |-> MaybeZero ]
    [ %tobool1 |-> MaybeZero ]
    [ i32 %arg |-> MaybeZero ]

Instruction:   %5 = load i32, i32* %4, align 4
In set: 
    [ %0       |-> MaybeZero ]
    [ %1       |-> MaybeZero ]
    [ %2       |-> NonZero   ]
    [ %3       |-> NonZero   ]
    [ %4       |-> NonZero   ]
    [ %a       |-> NonZero   ]
    [ %arg.addr |-> MaybeZero ]
    [ %b       |-> NonZero   ]
    [ %tobool  |-> MaybeZero ]
    [ %tobool1 |-> MaybeZero ]
    [ i32 %arg |-> MaybeZero ]
Out set: 
    [ %0       |-> MaybeZero ]
    [ %1       |-> MaybeZero ]
    [ %2       |-> NonZero   ]
    [ %3       |-> NonZero   ]
    [ %4       |-> NonZero   ]
    [ %5       |-> NonZero   ]
    [ %a       |-> NonZero   ]
    [ %arg.addr |-> MaybeZero ]
    [ %b       |-> NonZero   ]
    [ %tobool  |-> MaybeZero ]
    [ %tobool1 |-> MaybeZero ]
    [ i32 %arg |-> MaybeZero ]

Instruction:   %div = sdiv i32 1, %5
In set: 
    [ %0       |-> MaybeZero ]
    [ %1       |-> MaybeZero ]
    [ %2       |-> NonZero   ]
    [ %3       |-> NonZero   ]
    [ %4       |-> NonZero   ]
    [ %5       |-> NonZero   ]
    [ %a       |-> NonZero   ]
    [ %arg.addr |-> MaybeZero ]
    [ %b       |-> NonZero   ]
    [ %tobool  |-> MaybeZero ]
    [ %tobool1 |-> MaybeZero ]
    [ i32 %arg |-> MaybeZero ]
Out set: 
    [ %0       |-> MaybeZero ]
    [ %1       |-> MaybeZero ]
    [ %2       |-> NonZero   ]
    [ %3       |-> NonZero   ]
    [ %4       |-> NonZero   ]
    [ %5       |-> NonZero   ]
    [ %a       |-> NonZero   ]
    [ %arg.addr |-> MaybeZero ]
    [ %b       |-> NonZero   ]
    [ %div     |-> MaybeZero ]
    [ %tobool  |-> MaybeZero ]
    [ %tobool1 |-> MaybeZero ]
    [ i32 %arg |-> MaybeZero ]

Instruction:   store i32 %div, i32* %z2, align 4
In set: 
    [ %0       |-> MaybeZero ]
    [ %1       |-> MaybeZero ]
    [ %2       |-> NonZero   ]
    [ %3       |-> NonZero   ]
    [ %4       |-> NonZero   ]
    [ %5       |-> NonZero   ]
    [ %a       |-> NonZero   ]
    [ %arg.addr |-> MaybeZero ]
    [ %b       |-> NonZero   ]
    [ %div     |-> MaybeZero ]
    [ %tobool  |-> MaybeZero ]
    [ %tobool1 |-> MaybeZero ]
    [ i32 %arg |-> MaybeZero ]
Out set: 
    [ %0       |-> MaybeZero ]
    [ %1       |-> MaybeZero ]
    [ %2       |-> NonZero   ]
    [ %3       |-> NonZero   ]
    [ %4       |-> NonZero   ]
    [ %5       |-> NonZero   ]
    [ %a       |-> NonZero   ]
    [ %arg.addr |-> MaybeZero ]
    [ %b       |-> NonZero   ]
    [ %div     |-> MaybeZero ]
    [ %tobool  |-> MaybeZero ]
    [ %tobool1 |-> MaybeZero ]
    [ %z2      |-> MaybeZero ]
    [ i32 %arg |-> MaybeZero ]

Instruction:   ret i32 0
In set: 
    [ %0       |-> MaybeZero ]
    [ %1       |-> MaybeZero ]
    [ %2       |-> NonZero   ]
    [ %3       |-> NonZero   ]
    [ %4       |-> NonZero   ]
    [ %5       |-> NonZero   ]
    [ %a       |-> NonZero   ]
    [ %arg.addr |-> MaybeZero ]
    [ %b       |-> NonZero   ]
    [ %div     |-> MaybeZero ]
    [ %tobool  |-> MaybeZero ]
    [ %tobool1 |-> MaybeZero ]
    [ %z2      |-> MaybeZero ]
    [ i32 %arg |-> MaybeZero ]
Out set: 
    [ %0       |-> MaybeZero ]
    [ %1       |-> MaybeZero ]
    [ %2       |-> NonZero   ]
    [ %3       |-> NonZero   ]
    [ %4       |-> NonZero   ]
    [ %5       |-> NonZero   ]
    [ %a       |-> NonZero   ]
    [ %arg.addr |-> MaybeZero ]
    [ %b       |-> NonZero   ]
    [ %div     |-> MaybeZero ]
    [ %tobool  |-> MaybeZero ]
    [ %tobool1 |-> MaybeZero ]
    [ %z2      |-> MaybeZero ]
    [ i32 %arg |-> MaybeZero ]

